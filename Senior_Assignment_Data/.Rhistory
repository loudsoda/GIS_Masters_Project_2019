#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
else
print("activate")
})
}
runApp(shinyApp(ui, server), launch.browser = T)
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Fast and easy maps for anyone and everyon", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxGroupInput("point_switch","Make a point"),
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
server <- function(input, output,session) {
server <- function(input, output,session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = 0, lat= 0, zoom = 3)
})
#The Point button
observeEvent(input$point_switch, {
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch==FALSE)
NULL
})
}
runApp(shinyApp(ui, server), launch.browser = T)
#define the table's properties
fields <- c("MapID","Name","Type")
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Fast and easy maps for anyone and everyon", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxGroupInput("point_switch","Make a point"),
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
server <- function(input, output,session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = 0, lat= 0, zoom = 3)
})
#The Point button
observeEvent(input$point_switch, {
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch==FALSE)
NULL
})
}
runApp(shinyApp(ui, server), launch.browser = T)
library(shiny)
library(shiny)
library(leaflet)
library(shinyBS)
#define the table's properties
fields <- c("MapID","Name","Type")
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Feb 12 2020", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxGroupInput("point_switch","Make a point"),
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
server <- function(input, output,session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = 0, lat= 0, zoom = 3)
})
#The Point button
observeEvent(input$point_switch, {
# ________________________________________________________________________#
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch==FALSE)
NULL
})
}
runApp(shinyApp(ui, server), launch.browser = T)
#define the table's properties
fields <- c("MapID","Name","Type")
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Feb 12 2020", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxInput("point_switch","Make a point"),
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
server <- function(input, output,session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = 0, lat= 0, zoom = 3)
})
#The Point button
observeEvent(input$point_switch, {
# ________________________________________________________________________#
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch==FALSE)
NULL
})
}
runApp(shinyApp(ui, server), launch.browser = T)
#define the table's properties
fields <- c("MapID","Name","Type")
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Feb 12 2020", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxInput("point_switch","Make a point", value = FALSE),
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
server <- function(input, output,session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = 0, lat= 0, zoom = 3)
})
#The Point button
observeEvent(input$point_switch, {
# ________________________________________________________________________#
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch==FALSE)
NULL
})
}
runApp(shinyApp(ui, server), launch.browser = T)
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Feb 12 2020", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxInput("point_switch","Make a point", value = T)
switch,
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Feb 12 2020", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxInput("point_switch","Make a point", value = T),
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
server <- function(input, output,session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = 0, lat= 0, zoom = 3)
})
#The Point button
observeEvent(input$point_switch, {
# ________________________________________________________________________#
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch==FALSE)
NULL
})
}
runApp(shinyApp(ui, server), launch.browser = T)
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Feb 12 2020", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxInput("point_switch","Make a point", value = F),
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
server <- function(input, output,session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = 0, lat= 0, zoom = 3)
})
#The Point button
observeEvent(input$point_switch, {
# ________________________________________________________________________#
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch==FALSE)
NULL
})
}
runApp(shinyApp(ui, server), launch.browser = T)
ui <- bootstrapPage(
# whitespace and panels
fluidRow(
column(8,
h2("Quick Maps"),
h3("Feb 12 2020", style = "color:DarkRed"))),
#Checkbox to start creating polygons
checkboxInput("point_switch","Make a point", value = F),
tableOutput('table'),
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "80%", height = "90%"),
absolutePanel(top = 10, right = 10,
tags$h3("Click to make a point."),
actionButton("map", "click")
)
)
server <- function(input, output,session) {
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng = 0, lat= 0, zoom = 3)
})
#The Point button
observeEvent(input$point_switch, {
# ________________________________________________________________________#
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch$value==FALSE)
NULL
})
}
runApp(shinyApp(ui, server), launch.browser = T)
if (input$point_switch.value==FALSE)
if (input$point_switch.value==FALSE)
NULL
#The Point button
observeEvent(input$point_switch, {
# ________________________________________________________________________#
#Show popup on click
#This event creates a point (which is basically a small polygon for now)
if (input$point_switch==TRUE){
observeEvent(input$map_click, {
#Vars for the input command
click <- input$map_click
#Vars for the info popup
text<-paste("Lattitude ", click$lat,
"Longtitude ", click$lng)
#Creates a map-like object that can be used to customize and
#control a map that has already been rendered. For use in Shiny apps and Shiny docs only.
#https://www.rdocumentation.org/packages/leaflet/versions/2.0.3/topics/leafletProxy
proxy <- leafletProxy("map")
#Point pipeline logic
proxy %>%
#clear previous popup
clearPopups() %>%
#add current popup
addPopups(click$lng, click$lat, text) %>%
#add polygon
addPolygons(click$lng, click$lat)
})
}
if (input$point_switch.value==FALSE)
NULL
})
runApp(shinyApp(ui, server), launch.browser = T)
